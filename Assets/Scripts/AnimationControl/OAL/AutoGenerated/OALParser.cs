//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OAL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class OALParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, BOOL=63, NAME=64, STRING=65, NUM=66, COMMENT=67, 
		WHITE_SPACE=68;
	public const int
		RULE_lines = 0, RULE_line = 1, RULE_commands = 2, RULE_parCommand = 3, 
		RULE_threadCommand = 4, RULE_ifCommand = 5, RULE_elif = 6, RULE_elseBlock = 7, 
		RULE_condition = 8, RULE_whileCommand = 9, RULE_foreachCommand = 10, RULE_continueCommand = 11, 
		RULE_breakCommand = 12, RULE_commentCommand = 13, RULE_exeCommandQueryCreate = 14, 
		RULE_exeCommandQueryDelete = 15, RULE_exeCommandAssignment = 16, RULE_exeCommandCall = 17, 
		RULE_exeCommandCreateList = 18, RULE_listLiteral = 19, RULE_exeCommandAddingToList = 20, 
		RULE_exeCommandRemovingFromList = 21, RULE_exeCommandWrite = 22, RULE_exeCommandRead = 23, 
		RULE_exeCommandWait = 24, RULE_returnCommand = 25, RULE_expr = 26, RULE_accessChain = 27, 
		RULE_accessChainPrefix = 28, RULE_accessChainElement = 29, RULE_methodCall = 30, 
		RULE_parameterList = 31, RULE_parameterListSuffix = 32, RULE_bracketedExpr = 33, 
		RULE_typeName = 34, RULE_className = 35, RULE_arrayType = 36, RULE_variableName = 37, 
		RULE_methodName = 38, RULE_attribute = 39;
	public static readonly string[] ruleNames = {
		"lines", "line", "commands", "parCommand", "threadCommand", "ifCommand", 
		"elif", "elseBlock", "condition", "whileCommand", "foreachCommand", "continueCommand", 
		"breakCommand", "commentCommand", "exeCommandQueryCreate", "exeCommandQueryDelete", 
		"exeCommandAssignment", "exeCommandCall", "exeCommandCreateList", "listLiteral", 
		"exeCommandAddingToList", "exeCommandRemovingFromList", "exeCommandWrite", 
		"exeCommandRead", "exeCommandWait", "returnCommand", "expr", "accessChain", 
		"accessChainPrefix", "accessChainElement", "methodCall", "parameterList", 
		"parameterListSuffix", "bracketedExpr", "typeName", "className", "arrayType", 
		"variableName", "methodName", "attribute"
	};

	private static readonly string[] _LiteralNames = {
		null, "'par'", "'end par'", "';'", "'thread'", "'end thread'", "'if'", 
		"'end if'", "'elif'", "'else'", "'('", "')'", "'while'", "'end while'", 
		"'for each '", "' in '", "'end for'", "'continue'", "'break'", "'create object instance '", 
		"' of '", "'create object instance of '", "'delete object instance '", 
		"'assign '", "'='", "'.'", "'create list '", "'{'", "'}'", "'add '", "' to '", 
		"'remove '", "' from '", "'write('", "'(read('", "'))'", "'wait for'", 
		"'seconds'", "'return'", "'cardinality '", "'empty '", "'not_empty '", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'not '", "'NOT '", "' and '", "' AND '", "' or '", "' OR '", 
		"'['", "']'", "','", "'[]'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOL", "NAME", "STRING", "NUM", "COMMENT", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OAL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OALParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OALParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OALParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OALParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(Context, State);
		EnterRule(_localctx, 0, RULE_lines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80;
				line();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__11) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__25) | (1L << T__28) | (1L << T__30) | (1L << T__32) | (1L << T__35) | (1L << T__37))) != 0) || _la==NAME || _la==COMMENT );
			State = 85;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandQueryCreateContext exeCommandQueryCreate() {
			return GetRuleContext<ExeCommandQueryCreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandQueryDeleteContext exeCommandQueryDelete() {
			return GetRuleContext<ExeCommandQueryDeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandAssignmentContext exeCommandAssignment() {
			return GetRuleContext<ExeCommandAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandCallContext exeCommandCall() {
			return GetRuleContext<ExeCommandCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandCreateListContext exeCommandCreateList() {
			return GetRuleContext<ExeCommandCreateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandAddingToListContext exeCommandAddingToList() {
			return GetRuleContext<ExeCommandAddingToListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandRemovingFromListContext exeCommandRemovingFromList() {
			return GetRuleContext<ExeCommandRemovingFromListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandWriteContext exeCommandWrite() {
			return GetRuleContext<ExeCommandWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandReadContext exeCommandRead() {
			return GetRuleContext<ExeCommandReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExeCommandWaitContext exeCommandWait() {
			return GetRuleContext<ExeCommandWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnCommandContext returnCommand() {
			return GetRuleContext<ReturnCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueCommandContext continueCommand() {
			return GetRuleContext<ContinueCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakCommandContext breakCommand() {
			return GetRuleContext<BreakCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileCommandContext whileCommand() {
			return GetRuleContext<WhileCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachCommandContext foreachCommand() {
			return GetRuleContext<ForeachCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParCommandContext parCommand() {
			return GetRuleContext<ParCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentCommandContext commentCommand() {
			return GetRuleContext<CommentCommandContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				exeCommandQueryCreate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				exeCommandQueryDelete();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				exeCommandAssignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				exeCommandCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				exeCommandCreateList();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92;
				exeCommandAddingToList();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 93;
				exeCommandRemovingFromList();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 94;
				exeCommandWrite();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 95;
				exeCommandRead();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 96;
				exeCommandWait();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 97;
				returnCommand();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 98;
				continueCommand();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 99;
				breakCommand();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 100;
				whileCommand();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 101;
				ifCommand();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 102;
				foreachCommand();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 103;
				parCommand();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 104;
				commentCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 4, RULE_commands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__5) | (1L << T__11) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__25) | (1L << T__28) | (1L << T__30) | (1L << T__32) | (1L << T__35) | (1L << T__37))) != 0) || _la==NAME || _la==COMMENT) {
				{
				{
				State = 107;
				line();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ThreadCommandContext[] threadCommand() {
			return GetRuleContexts<ThreadCommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadCommandContext threadCommand(int i) {
			return GetRuleContext<ThreadCommandContext>(i);
		}
		public ParCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterParCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitParCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParCommandContext parCommand() {
		ParCommandContext _localctx = new ParCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_parCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__0);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 114;
				threadCommand();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 119;
			Match(T__1);
			State = 120;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ThreadCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterThreadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitThreadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadCommandContext threadCommand() {
		ThreadCommandContext _localctx = new ThreadCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_threadCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__3);
			State = 123;
			commands();
			State = 124;
			Match(T__4);
			State = 125;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifContext[] elif() {
			return GetRuleContexts<ElifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifContext elif(int i) {
			return GetRuleContext<ElifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__5);
			State = 128;
			condition();
			State = 129;
			commands();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 130;
				elif();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 136;
				elseBlock();
				}
			}

			State = 139;
			Match(T__6);
			State = 140;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ElifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterElif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitElif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifContext elif() {
		ElifContext _localctx = new ElifContext(Context, State);
		EnterRule(_localctx, 12, RULE_elif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__7);
			State = 143;
			condition();
			State = 144;
			commands();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__8);
			State = 147;
			commands();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__9);
			State = 150;
			expr(0);
			State = 151;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public WhileCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCommandContext whileCommand() {
		WhileCommandContext _localctx = new WhileCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__11);
			State = 154;
			condition();
			State = 155;
			commands();
			State = 156;
			Match(T__12);
			State = 157;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableNameContext variableName() {
			return GetRuleContext<VariableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public ForeachCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterForeachCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitForeachCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachCommandContext foreachCommand() {
		ForeachCommandContext _localctx = new ForeachCommandContext(Context, State);
		EnterRule(_localctx, 20, RULE_foreachCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(T__13);
			State = 160;
			variableName();
			State = 161;
			Match(T__14);
			State = 162;
			expr(0);
			State = 163;
			commands();
			State = 164;
			Match(T__15);
			State = 165;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueCommandContext : ParserRuleContext {
		public ContinueCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterContinueCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitContinueCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueCommandContext continueCommand() {
		ContinueCommandContext _localctx = new ContinueCommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_continueCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__16);
			State = 168;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakCommandContext : ParserRuleContext {
		public BreakCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterBreakCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitBreakCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakCommandContext breakCommand() {
		BreakCommandContext _localctx = new BreakCommandContext(Context, State);
		EnterRule(_localctx, 24, RULE_breakCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__17);
			State = 171;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(OALParser.COMMENT, 0); }
		public CommentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterCommentCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitCommentCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentCommandContext commentCommand() {
		CommentCommandContext _localctx = new CommentCommandContext(Context, State);
		EnterRule(_localctx, 26, RULE_commentCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandQueryCreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ExeCommandQueryCreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandQueryCreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandQueryCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandQueryCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandQueryCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandQueryCreateContext exeCommandQueryCreate() {
		ExeCommandQueryCreateContext _localctx = new ExeCommandQueryCreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_exeCommandQueryCreate);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(T__18);
				State = 176;
				accessChain();
				State = 177;
				Match(T__19);
				State = 178;
				className();
				State = 179;
				Match(T__2);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				Match(T__20);
				State = 182;
				className();
				State = 183;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandQueryDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExeCommandQueryDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandQueryDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandQueryDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandQueryDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandQueryDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandQueryDeleteContext exeCommandQueryDelete() {
		ExeCommandQueryDeleteContext _localctx = new ExeCommandQueryDeleteContext(Context, State);
		EnterRule(_localctx, 30, RULE_exeCommandQueryDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__21);
			State = 188;
			expr(0);
			State = 189;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExeCommandAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandAssignmentContext exeCommandAssignment() {
		ExeCommandAssignmentContext _localctx = new ExeCommandAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_exeCommandAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 191;
				Match(T__22);
				}
			}

			State = 194;
			accessChain();
			State = 195;
			Match(T__23);
			State = 196;
			expr(0);
			State = 197;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		public ExeCommandCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandCallContext exeCommandCall() {
		ExeCommandCallContext _localctx = new ExeCommandCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_exeCommandCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 199;
				accessChain();
				State = 200;
				Match(T__24);
				}
				break;
			}
			State = 204;
			methodCall();
			State = 205;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandCreateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public ExeCommandCreateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandCreateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandCreateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandCreateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandCreateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandCreateListContext exeCommandCreateList() {
		ExeCommandCreateListContext _localctx = new ExeCommandCreateListContext(Context, State);
		EnterRule(_localctx, 36, RULE_exeCommandCreateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__25);
			State = 208;
			accessChain();
			State = 209;
			Match(T__19);
			State = 210;
			typeName();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__26) {
				{
				State = 211;
				listLiteral();
				}
			}

			State = 214;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitListLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__26);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T__9 - 10)) | (1L << (T__38 - 10)) | (1L << (T__39 - 10)) | (1L << (T__40 - 10)) | (1L << (T__52 - 10)) | (1L << (T__53 - 10)) | (1L << (BOOL - 10)) | (1L << (NAME - 10)) | (1L << (STRING - 10)) | (1L << (NUM - 10)))) != 0)) {
				{
				State = 217;
				parameterList();
				}
			}

			State = 220;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandAddingToListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExeCommandAddingToListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandAddingToList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandAddingToList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandAddingToList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandAddingToList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandAddingToListContext exeCommandAddingToList() {
		ExeCommandAddingToListContext _localctx = new ExeCommandAddingToListContext(Context, State);
		EnterRule(_localctx, 40, RULE_exeCommandAddingToList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__28);
			State = 223;
			expr(0);
			State = 224;
			Match(T__29);
			State = 225;
			expr(0);
			State = 226;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandRemovingFromListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExeCommandRemovingFromListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandRemovingFromList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandRemovingFromList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandRemovingFromList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandRemovingFromList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandRemovingFromListContext exeCommandRemovingFromList() {
		ExeCommandRemovingFromListContext _localctx = new ExeCommandRemovingFromListContext(Context, State);
		EnterRule(_localctx, 42, RULE_exeCommandRemovingFromList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__30);
			State = 229;
			expr(0);
			State = 230;
			Match(T__31);
			State = 231;
			expr(0);
			State = 232;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExeCommandWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandWriteContext exeCommandWrite() {
		ExeCommandWriteContext _localctx = new ExeCommandWriteContext(Context, State);
		EnterRule(_localctx, 44, RULE_exeCommandWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(T__32);
			State = 235;
			parameterList();
			State = 236;
			Match(T__10);
			State = 237;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExeCommandReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandReadContext exeCommandRead() {
		ExeCommandReadContext _localctx = new ExeCommandReadContext(Context, State);
		EnterRule(_localctx, 46, RULE_exeCommandRead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 239;
				Match(T__22);
				}
			}

			State = 242;
			accessChain();
			State = 243;
			Match(T__23);
			State = 244;
			className();
			State = 245;
			Match(T__33);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T__9 - 10)) | (1L << (T__38 - 10)) | (1L << (T__39 - 10)) | (1L << (T__40 - 10)) | (1L << (T__52 - 10)) | (1L << (T__53 - 10)) | (1L << (BOOL - 10)) | (1L << (NAME - 10)) | (1L << (STRING - 10)) | (1L << (NUM - 10)))) != 0)) {
				{
				State = 246;
				expr(0);
				}
			}

			State = 249;
			Match(T__34);
			State = 250;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExeCommandWaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExeCommandWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exeCommandWait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExeCommandWait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExeCommandWait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExeCommandWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExeCommandWaitContext exeCommandWait() {
		ExeCommandWaitContext _localctx = new ExeCommandWaitContext(Context, State);
		EnterRule(_localctx, 48, RULE_exeCommandWait);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__35);
			State = 253;
			expr(0);
			State = 254;
			Match(T__36);
			State = 255;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterReturnCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitReturnCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnCommandContext returnCommand() {
		ReturnCommandContext _localctx = new ReturnCommandContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(T__37);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T__9 - 10)) | (1L << (T__38 - 10)) | (1L << (T__39 - 10)) | (1L << (T__40 - 10)) | (1L << (T__52 - 10)) | (1L << (T__53 - 10)) | (1L << (BOOL - 10)) | (1L << (NAME - 10)) | (1L << (STRING - 10)) | (1L << (NUM - 10)))) != 0)) {
				{
				State = 258;
				expr(0);
				}
			}

			State = 261;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(OALParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(OALParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(OALParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainContext accessChain() {
			return GetRuleContext<AccessChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketedExprContext bracketedExpr() {
			return GetRuleContext<BracketedExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				{
				State = 264;
				Match(NUM);
				}
				break;
			case BOOL:
				{
				State = 265;
				Match(BOOL);
				}
				break;
			case STRING:
				{
				State = 266;
				Match(STRING);
				}
				break;
			case NAME:
				{
				State = 267;
				accessChain();
				}
				break;
			case T__38:
				{
				State = 268;
				Match(T__38);
				State = 269;
				expr(9);
				}
				break;
			case T__39:
			case T__40:
				{
				State = 270;
				_la = TokenStream.LA(1);
				if ( !(_la==T__39 || _la==T__40) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 271;
				expr(8);
				}
				break;
			case T__9:
				{
				State = 272;
				bracketedExpr();
				}
				break;
			case T__52:
			case T__53:
				{
				State = 273;
				_la = TokenStream.LA(1);
				if ( !(_la==T__52 || _la==T__53) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 274;
				expr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 292;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 277;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 278;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 279;
						expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 280;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 281;
						_la = TokenStream.LA(1);
						if ( !(_la==T__44 || _la==T__45) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 282;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 283;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 284;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 285;
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 286;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 287;
						_la = TokenStream.LA(1);
						if ( !(_la==T__54 || _la==T__55) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 288;
						expr(3);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 289;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 290;
						_la = TokenStream.LA(1);
						if ( !(_la==T__56 || _la==T__57) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 291;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AccessChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainElementContext accessChainElement() {
			return GetRuleContext<AccessChainElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainPrefixContext accessChainPrefix() {
			return GetRuleContext<AccessChainPrefixContext>(0);
		}
		public AccessChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterAccessChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitAccessChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessChainContext accessChain() {
		AccessChainContext _localctx = new AccessChainContext(Context, State);
		EnterRule(_localctx, 54, RULE_accessChain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 297;
				accessChainPrefix();
				}
				break;
			}
			State = 300;
			accessChainElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessChainPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainElementContext[] accessChainElement() {
			return GetRuleContexts<AccessChainElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessChainElementContext accessChainElement(int i) {
			return GetRuleContext<AccessChainElementContext>(i);
		}
		public AccessChainPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessChainPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterAccessChainPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitAccessChainPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessChainPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessChainPrefixContext accessChainPrefix() {
		AccessChainPrefixContext _localctx = new AccessChainPrefixContext(Context, State);
		EnterRule(_localctx, 56, RULE_accessChainPrefix);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 302;
					accessChainElement();
					State = 303;
					Match(T__24);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessChainElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OALParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AccessChainElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessChainElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterAccessChainElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitAccessChainElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessChainElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessChainElementContext accessChainElement() {
		AccessChainElementContext _localctx = new AccessChainElementContext(Context, State);
		EnterRule(_localctx, 58, RULE_accessChainElement);
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				methodCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 311;
					Match(NAME);
					}
					break;
				case 2:
					{
					State = 312;
					methodCall();
					}
					break;
				}
				State = 315;
				Match(T__58);
				State = 316;
				expr(0);
				State = 317;
				Match(T__59);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			methodName();
			State = 322;
			Match(T__9);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T__9 - 10)) | (1L << (T__38 - 10)) | (1L << (T__39 - 10)) | (1L << (T__40 - 10)) | (1L << (T__52 - 10)) | (1L << (T__53 - 10)) | (1L << (BOOL - 10)) | (1L << (NAME - 10)) | (1L << (STRING - 10)) | (1L << (NUM - 10)))) != 0)) {
				{
				State = 323;
				parameterList();
				}
			}

			State = 326;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListSuffixContext parameterListSuffix() {
			return GetRuleContext<ParameterListSuffixContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			expr(0);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__60) {
				{
				State = 329;
				parameterListSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ParameterListSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterListSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterParameterListSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitParameterListSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterListSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListSuffixContext parameterListSuffix() {
		ParameterListSuffixContext _localctx = new ParameterListSuffixContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterListSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 332;
				Match(T__60);
				State = 333;
				expr(0);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__60 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracketedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterBracketedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitBracketedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketedExprContext bracketedExpr() {
		BracketedExprContext _localctx = new BracketedExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_bracketedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__9);
			State = 339;
			expr(0);
			State = 340;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext[] arrayType() {
			return GetRuleContexts<ArrayTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType(int i) {
			return GetRuleContext<ArrayTypeContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			className();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__61) {
				{
				{
				State = 343;
				arrayType();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OALParser.NAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(T__61);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OALParser.NAME, 0); }
		public VariableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitVariableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableNameContext variableName() {
		VariableNameContext _localctx = new VariableNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OALParser.NAME, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(OALParser.NAME, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOALListener typedListener = listener as IOALListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOALVisitor<TResult> typedVisitor = visitor as IOALVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 78, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x46', '\x16A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\x6', '\x2', 'T', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'U', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'l', '\n', '\x3', '\x3', '\x4', '\a', '\x4', 
		'o', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'r', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x6', '\x5', 'v', '\n', '\x5', '\r', '\x5', '\xE', 
		'\x5', 'w', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x86', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x89', '\v', '\a', '\x3', '\a', '\x5', '\a', '\x8C', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xBC', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x5', '\x12', '\xC3', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xCD', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD7', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xDD', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x5', '\x19', '\xF3', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xFA', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x106', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x116', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x127', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x12A', 
		'\v', '\x1C', '\x3', '\x1D', '\x5', '\x1D', '\x12D', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x6', 
		'\x1E', '\x134', '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\x135', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x13C', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x142', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x147', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x14D', '\n', '!', '\x3', '\"', '\x3', '\"', '\x6', 
		'\"', '\x151', '\n', '\"', '\r', '\"', '\xE', '\"', '\x152', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\a', '$', 
		'\x15B', '\n', '$', '\f', '$', '\xE', '$', '\x15E', '\v', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x2', '\x3', '\x36', 
		'*', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', '\x2', '\t', '\x3', '\x2', 
		'*', '+', '\x3', '\x2', '\x37', '\x38', '\x3', '\x2', ',', '.', '\x3', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x31', '\x36', '\x3', '\x2', '\x39', 
		':', '\x3', '\x2', ';', '<', '\x2', '\x174', '\x2', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'k', '\x3', '\x2', '\x2', '\x2', '\x6', 'p', '\x3', 
		'\x2', '\x2', '\x2', '\b', 's', '\x3', '\x2', '\x2', '\x2', '\n', '|', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x90', '\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x97', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xBD', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '$', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xD1', '\x3', '\x2', '\x2', '\x2', '(', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xE0', '\x3', '\x2', '\x2', '\x2', ',', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x32', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x103', '\x3', '\x2', '\x2', '\x2', '\x36', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x12C', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '<', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x143', '\x3', '\x2', '\x2', '\x2', '@', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x150', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x46', '\x158', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x15F', '\x3', '\x2', '\x2', '\x2', 'J', '\x161', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x163', '\x3', '\x2', '\x2', '\x2', 'N', '\x165', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x5', '\x4', '\x3', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\a', '\x2', '\x2', '\x3', 'X', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'l', '\x5', '\x1E', '\x10', '\x2', 'Z', 'l', '\x5', ' ', '\x11', 
		'\x2', '[', 'l', '\x5', '\"', '\x12', '\x2', '\\', 'l', '\x5', '$', '\x13', 
		'\x2', ']', 'l', '\x5', '&', '\x14', '\x2', '^', 'l', '\x5', '*', '\x16', 
		'\x2', '_', 'l', '\x5', ',', '\x17', '\x2', '`', 'l', '\x5', '.', '\x18', 
		'\x2', '\x61', 'l', '\x5', '\x30', '\x19', '\x2', '\x62', 'l', '\x5', 
		'\x32', '\x1A', '\x2', '\x63', 'l', '\x5', '\x34', '\x1B', '\x2', '\x64', 
		'l', '\x5', '\x18', '\r', '\x2', '\x65', 'l', '\x5', '\x1A', '\xE', '\x2', 
		'\x66', 'l', '\x5', '\x14', '\v', '\x2', 'g', 'l', '\x5', '\f', '\a', 
		'\x2', 'h', 'l', '\x5', '\x16', '\f', '\x2', 'i', 'l', '\x5', '\b', '\x5', 
		'\x2', 'j', 'l', '\x5', '\x1C', '\xF', '\x2', 'k', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'Z', '\x3', '\x2', '\x2', '\x2', 'k', '[', '\x3', '\x2', 
		'\x2', '\x2', 'k', '\\', '\x3', '\x2', '\x2', '\x2', 'k', ']', '\x3', 
		'\x2', '\x2', '\x2', 'k', '^', '\x3', '\x2', '\x2', '\x2', 'k', '_', '\x3', 
		'\x2', '\x2', '\x2', 'k', '`', '\x3', '\x2', '\x2', '\x2', 'k', '\x61', 
		'\x3', '\x2', '\x2', '\x2', 'k', '\x62', '\x3', '\x2', '\x2', '\x2', 'k', 
		'\x63', '\x3', '\x2', '\x2', '\x2', 'k', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\x65', '\x3', '\x2', '\x2', '\x2', 'k', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'g', '\x3', '\x2', '\x2', '\x2', 'k', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x5', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x5', 
		'\x4', '\x3', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', '\a', '\x3', '\x2', '\x2', '\x2', 'r', 'p', 
		'\x3', '\x2', '\x2', '\x2', 's', 'u', '\a', '\x3', '\x2', '\x2', 't', 
		'v', '\x5', '\n', '\x6', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\a', '\x4', '\x2', '\x2', 'z', '{', '\a', '\x5', '\x2', '\x2', 
		'{', '\t', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x6', '\x2', '\x2', 
		'}', '~', '\x5', '\x6', '\x4', '\x2', '~', '\x7F', '\a', '\a', '\x2', 
		'\x2', '\x7F', '\x80', '\a', '\x5', '\x2', '\x2', '\x80', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\b', '\x2', '\x2', '\x82', 
		'\x83', '\x5', '\x12', '\n', '\x2', '\x83', '\x87', '\x5', '\x6', '\x4', 
		'\x2', '\x84', '\x86', '\x5', '\xE', '\b', '\x2', '\x85', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x10', '\t', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\t', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x5', '\x2', '\x2', '\x8F', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\n', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '\x12', '\n', '\x2', '\x92', '\x93', '\x5', '\x6', 
		'\x4', '\x2', '\x93', '\xF', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\a', '\v', '\x2', '\x2', '\x95', '\x96', '\x5', '\x6', '\x4', '\x2', 
		'\x96', '\x11', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\f', 
		'\x2', '\x2', '\x98', '\x99', '\x5', '\x36', '\x1C', '\x2', '\x99', '\x9A', 
		'\a', '\r', '\x2', '\x2', '\x9A', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9C', '\a', '\xE', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x12', 
		'\n', '\x2', '\x9D', '\x9E', '\x5', '\x6', '\x4', '\x2', '\x9E', '\x9F', 
		'\a', '\xF', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x5', '\x2', '\x2', 
		'\xA0', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x10', 
		'\x2', '\x2', '\xA2', '\xA3', '\x5', 'L', '\'', '\x2', '\xA3', '\xA4', 
		'\a', '\x11', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x36', '\x1C', '\x2', 
		'\xA5', '\xA6', '\x5', '\x6', '\x4', '\x2', '\xA6', '\xA7', '\a', '\x12', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x5', '\x2', '\x2', '\xA8', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x13', '\x2', '\x2', 
		'\xAA', '\xAB', '\a', '\x5', '\x2', '\x2', '\xAB', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '\x14', '\x2', '\x2', '\xAD', '\xAE', 
		'\a', '\x5', '\x2', '\x2', '\xAE', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\a', '\x45', '\x2', '\x2', '\xB0', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '\x15', '\x2', '\x2', '\xB2', '\xB3', 
		'\x5', '\x38', '\x1D', '\x2', '\xB3', '\xB4', '\a', '\x16', '\x2', '\x2', 
		'\xB4', '\xB5', '\x5', 'H', '%', '\x2', '\xB5', '\xB6', '\a', '\x5', '\x2', 
		'\x2', '\xB6', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\x17', '\x2', '\x2', '\xB8', '\xB9', '\x5', 'H', '%', '\x2', '\xB9', 
		'\xBA', '\a', '\x5', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x18', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x36', '\x1C', 
		'\x2', '\xBF', '\xC0', '\a', '\x5', '\x2', '\x2', '\xC0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC3', '\a', '\x19', '\x2', '\x2', '\xC2', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x5', 
		'\x38', '\x1D', '\x2', '\xC5', '\xC6', '\a', '\x1A', '\x2', '\x2', '\xC6', 
		'\xC7', '\x5', '\x36', '\x1C', '\x2', '\xC7', '\xC8', '\a', '\x5', '\x2', 
		'\x2', '\xC8', '#', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x5', 
		'\x38', '\x1D', '\x2', '\xCA', '\xCB', '\a', '\x1B', '\x2', '\x2', '\xCB', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x5', '>', ' ', '\x2', '\xCF', '\xD0', 
		'\a', '\x5', '\x2', '\x2', '\xD0', '%', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x1C', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x38', '\x1D', 
		'\x2', '\xD3', '\xD4', '\a', '\x16', '\x2', '\x2', '\xD4', '\xD6', '\x5', 
		'\x46', '$', '\x2', '\xD5', '\xD7', '\x5', '(', '\x15', '\x2', '\xD6', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\x5', '\x2', '\x2', '\xD9', '\'', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDC', '\a', '\x1D', '\x2', '\x2', '\xDB', '\xDD', '\x5', '@', '!', '\x2', 
		'\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\a', '\x1E', '\x2', '\x2', '\xDF', ')', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x1F', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x36', '\x1C', 
		'\x2', '\xE2', '\xE3', '\a', ' ', '\x2', '\x2', '\xE3', '\xE4', '\x5', 
		'\x36', '\x1C', '\x2', '\xE4', '\xE5', '\a', '\x5', '\x2', '\x2', '\xE5', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '!', '\x2', '\x2', 
		'\xE7', '\xE8', '\x5', '\x36', '\x1C', '\x2', '\xE8', '\xE9', '\a', '\"', 
		'\x2', '\x2', '\xE9', '\xEA', '\x5', '\x36', '\x1C', '\x2', '\xEA', '\xEB', 
		'\a', '\x5', '\x2', '\x2', '\xEB', '-', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '#', '\x2', '\x2', '\xED', '\xEE', '\x5', '@', '!', '\x2', 
		'\xEE', '\xEF', '\a', '\r', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x5', 
		'\x2', '\x2', '\xF0', '/', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', 
		'\a', '\x19', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF5', '\x5', '\x38', '\x1D', '\x2', '\xF5', '\xF6', 
		'\a', '\x1A', '\x2', '\x2', '\xF6', '\xF7', '\x5', 'H', '%', '\x2', '\xF7', 
		'\xF9', '\a', '$', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\x36', '\x1C', 
		'\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '%', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x5', '\x2', '\x2', 
		'\xFD', '\x31', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '&', 
		'\x2', '\x2', '\xFF', '\x100', '\x5', '\x36', '\x1C', '\x2', '\x100', 
		'\x101', '\a', '\'', '\x2', '\x2', '\x101', '\x102', '\a', '\x5', '\x2', 
		'\x2', '\x102', '\x33', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', 
		'\a', '(', '\x2', '\x2', '\x104', '\x106', '\x5', '\x36', '\x1C', '\x2', 
		'\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\a', '\x5', '\x2', '\x2', '\x108', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\b', '\x1C', '\x1', '\x2', '\x10A', '\x116', 
		'\a', '\x44', '\x2', '\x2', '\x10B', '\x116', '\a', '\x41', '\x2', '\x2', 
		'\x10C', '\x116', '\a', '\x43', '\x2', '\x2', '\x10D', '\x116', '\x5', 
		'\x38', '\x1D', '\x2', '\x10E', '\x10F', '\a', ')', '\x2', '\x2', '\x10F', 
		'\x116', '\x5', '\x36', '\x1C', '\v', '\x110', '\x111', '\t', '\x2', '\x2', 
		'\x2', '\x111', '\x116', '\x5', '\x36', '\x1C', '\n', '\x112', '\x116', 
		'\x5', '\x44', '#', '\x2', '\x113', '\x114', '\t', '\x3', '\x2', '\x2', 
		'\x114', '\x116', '\x5', '\x36', '\x1C', '\x5', '\x115', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x115', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x115', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\f', '\b', '\x2', '\x2', '\x118', 
		'\x119', '\t', '\x4', '\x2', '\x2', '\x119', '\x127', '\x5', '\x36', '\x1C', 
		'\t', '\x11A', '\x11B', '\f', '\a', '\x2', '\x2', '\x11B', '\x11C', '\t', 
		'\x5', '\x2', '\x2', '\x11C', '\x127', '\x5', '\x36', '\x1C', '\b', '\x11D', 
		'\x11E', '\f', '\x6', '\x2', '\x2', '\x11E', '\x11F', '\t', '\x6', '\x2', 
		'\x2', '\x11F', '\x127', '\x5', '\x36', '\x1C', '\a', '\x120', '\x121', 
		'\f', '\x4', '\x2', '\x2', '\x121', '\x122', '\t', '\a', '\x2', '\x2', 
		'\x122', '\x127', '\x5', '\x36', '\x1C', '\x5', '\x123', '\x124', '\f', 
		'\x3', '\x2', '\x2', '\x124', '\x125', '\t', '\b', '\x2', '\x2', '\x125', 
		'\x127', '\x5', '\x36', '\x1C', '\x4', '\x126', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\x126', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x126', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x123', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', 
		'\x5', ':', '\x1E', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', '<', '\x1F', '\x2', '\x12F', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x5', '<', '\x1F', 
		'\x2', '\x131', '\x132', '\a', '\x1B', '\x2', '\x2', '\x132', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', 
		';', '\x3', '\x2', '\x2', '\x2', '\x137', '\x142', '\x5', '>', ' ', '\x2', 
		'\x138', '\x142', '\a', '\x42', '\x2', '\x2', '\x139', '\x13C', '\a', 
		'\x42', '\x2', '\x2', '\x13A', '\x13C', '\x5', '>', ' ', '\x2', '\x13B', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', 
		'\a', '=', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\x36', '\x1C', '\x2', 
		'\x13F', '\x140', '\a', '>', '\x2', '\x2', '\x140', '\x142', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x137', '\x3', '\x2', '\x2', '\x2', '\x141', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '=', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x5', 'N', 
		'(', '\x2', '\x144', '\x146', '\a', '\f', '\x2', '\x2', '\x145', '\x147', 
		'\x5', '@', '!', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\a', '\r', '\x2', '\x2', '\x149', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', '\x5', '\x36', '\x1C', 
		'\x2', '\x14B', '\x14D', '\x5', '\x42', '\"', '\x2', '\x14C', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\a', '?', 
		'\x2', '\x2', '\x14F', '\x151', '\x5', '\x36', '\x1C', '\x2', '\x150', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x155', '\a', '\f', '\x2', '\x2', '\x155', '\x156', '\x5', '\x36', 
		'\x1C', '\x2', '\x156', '\x157', '\a', '\r', '\x2', '\x2', '\x157', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x15C', '\x5', 'H', '%', '\x2', 
		'\x159', '\x15B', '\x5', 'J', '&', '\x2', '\x15A', '\x159', '\x3', '\x2', 
		'\x2', '\x2', '\x15B', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', 'G', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', '\x15F', '\x160', '\a', '\x42', '\x2', '\x2', '\x160', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '@', '\x2', '\x2', 
		'\x162', 'K', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\a', '\x42', 
		'\x2', '\x2', '\x164', 'M', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', 
		'\a', '\x42', '\x2', '\x2', '\x166', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x168', '\a', '\x42', '\x2', '\x2', '\x168', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', 'U', 'k', 'p', 'w', '\x87', '\x8B', '\xBB', '\xC2', 
		'\xCC', '\xD6', '\xDC', '\xF2', '\xF9', '\x105', '\x115', '\x126', '\x128', 
		'\x12C', '\x135', '\x13B', '\x141', '\x146', '\x14C', '\x152', '\x15C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
